generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id         Int      @id @default(autoincrement())
  street     String
  number     String
  complement String?
  district   String
  city       String
  state      String
  cep        String
  userId     Int?
  officeId   String?
  patientId  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  offices    Office?  @relation(fields: [officeId], references: [identity])
  patients   Patient? @relation(fields: [patientId], references: [identity])

  @@map("addresses")
}

model Anamnese {
  id                     Int      @id @default(autoincrement())
  reason                 String
  discomfort_mouth       String
  high_pressure          String
  control_pressure       String
  oral_hygiene           String
  grind_teeth            String
  allergy                String
  what_allergy           String
  drink_smoke            String
  frequency              String
  bleeding               String
  when_bleeding          String
  sensitivity            String
  prothesis              String
  prothesis_type         String
  pregnant_breastfeeding String?
  pregnant_time          String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime
  patientId              String
  patients               Patient  @relation(fields: [patientId], references: [identity])

  @@map("anamneses")
}

model Budget {
  id               Int      @id @default(autoincrement())
  treatment_type   String
  treatment_date   String
  procedure_type   String
  agreement        String
  total            Int
  entry            Int?
  pay_installments Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  patientId        String
  patients         Patient  @relation(fields: [patientId], references: [identity])
  teeths           Teeth[]

  @@map("budgets")
}

model Office {
  id        Int       @id @default(autoincrement())
  identity  String?   @unique
  corporate String
  name      String
  tel       String
  cnpj      String    @unique
  status    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime
  addresses Address[]
  patients  Patient[]
  users     User[]
  payment   Payment[]

  @@map("offices")
}

model Payment {
  id             Int         @id @default(autoincrement())
  payment        String
  split_payment  String?
  paymentType    PaymentType @default(DEBIT)
  payday         DateTime
  updatedAt      DateTime?
  createdAt      DateTime?
  userId         Int
  officeIdentity String
  users          User        @relation(fields: [userId], references: [id])
  offices        Office      @relation(fields: [officeIdentity], references: [identity])

  @@map("payments")
}

model Patient {
  id                     Int        @id @default(autoincrement())
  identity               String?    @unique
  name                   String
  email                  String?
  cpf                    String
  rg                     String?
  birth_date             String
  tel                    String
  career                 String
  gender                 String
  age                    Int
  responsible_name       String?
  responsible_birth_date String?
  contact_name           String?
  contact_tel            String?
  agreement              String
  agreement_card         String
  holder_name            String?
  cpf_holder             String?
  note                   String?
  status                 Boolean    @default(true)
  role                   Role       @default(PATIENT)
  createdAt              DateTime   @default(now())
  updatedAt              DateTime
  officeId               String
  addresses              Address[]
  anamneses              Anamnese[]
  budgets                Budget[]
  offices                Office     @relation(fields: [officeId], references: [identity], onDelete: Cascade)

  @@map("patients")
}

model Session {
  id         Int      @id @default(autoincrement())
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  timestamps Boolean  @default(true)
  userId     Int
  users      User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model Teeth {
  id       Int    @id @default(autoincrement())
  name     String
  position String
  faces    String
  option   String
  value    Int
  discount Int
  budgetId Int
  budgets  Budget @relation(fields: [budgetId], references: [id])

  @@map("teeths")
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  password    String
  tel         String?
  status      Boolean   @default(true)
  role        Role      @default(USER)
  officeId    String?
  firstAccess Boolean   @default(true)
  createdAt   DateTime?
  updatedAt   DateTime
  sessions    Session[]
  offices     Office?   @relation(fields: [officeId], references: [identity])
  payment     Payment[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
  BACKOFFICE
  PATIENT
}

enum PaymentType {
  CREDIT
  DEBIT
  MONEY
}
